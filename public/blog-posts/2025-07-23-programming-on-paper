# The future of programming is with pen and paper
by Lena Kahle

inspired by conversation with Damir on how the future of programming might look like and whether we'll keep writing code

assumptions/problems to solve:
- writing code is a very unintuitive way of communication between human and machine, and even more between human and human -> aims to solve the inefficient gap between machines and humans' intuitive expression of ideas
- the earliest forms of human expression found are cave paintings and statues - writing came much later, and e.g. the incas built an enormous empire without ever developing a writing system
- there is some study that showed that doctors should first analyse a scan or whatever and point out whether there is cancer BEFORE showing it to a machine trained to do the same thing - if it happens the other way around, the doctor tends to get lazy and just approves whatever the machine says
- accountability - even if we move away from code, AI cannot be held accountable. it must be the programmer (or conductor or however we want to call them)

idea
- communication through diagrams, drawn on paper, whiteboards, other other comparable mediums devoid of distraction and direct AI intervention

what issues does this solve?
- code is an imperfect way of communicating ideas from human to machine (or human to human) and slows down both sides, in creation and execution (performance, ...)
- chat history is annoying and cannot be relied upon - ideas and refinement gets lost
- UML diagrams are great for being some in between step between human and machine but out of that context they are not very useful - lacking information, too formalised, ambiguous, easy to  make mistakes, hard to spot them. "if everything is important nothing is important" -> varying levels of definition allow to reflect system complexity. can be refined later on
- blind trust in machines
- loss of control
- AI can produce much more code than humans could ever read, or even want to read

advantages
- intuitive: better than code or UML diagrams
- flexibility of refinement
	- work rough to fine: some things don't need to be defined line by line, solve issues as they arise
	- different parts of a project can have different levels of refinement
	- designed for growth: as AI gets better we just need to define less. we can consider removing previous refinements that might hinder a more efficient implementation by AI
- control: allows retaining high level oversight on what AI is doing
- accountability: diagrams serve as a contract between human and machine. there is a clear human co-author for the contract
- personalised: no boundaries except your creativity when it comes to ideas and expression
- sense of accomplishment: human can see on paper what their work is and remains in control of their mind
- clear role of human, prevent [[atrophy of the mind]]
- allows both human and machine to focus on their strengths instead of holding each other back
- deepen the connection between programmer/conductor and what they create (steinbeck, grapes of wreath, industrial revolution)

how does programming on paper look like presently?
- you get a ticket and think about it on paper - or make a whiteboard session as a team; this could include:
	- architecture diagrams
	- concrete examples and edge cases
	- description of behaviour
	- rough flow diagrams
- you upload a photo to cursor in a given context and ask the tool to explain what it sees and takes away from it
- cursor implements the code
- you can have discussions with the AI tool as you go, and refine your drawings, make new ones, etc. as you go
- you review the code and cross-check logic and functionality with the drawings

how could programming on paper look like in the future?
- AI agent observes whiteboard session through video or whatever and builds up understanding along the way
- AI agent participates in team discussion or personal brainstorming sessions via voice chat (["Einstein in your basement" metaphor by Henrik Kniberg](https://www.youtube.com/watch?v=2IK3DFHRFfw))
- models get better at OCR and understanding diagram input
- you discuss the drawing with the AI and upload it. together you work out areas that need more refinement, while leaving things that are clear as they are
- the ai proposes a diagram of its own. you can refine this together with the AI and approve
- the AI reliably handles how the system implements this - with code or whatever else. implementation and performance are abstracted away from us humans. the approved diagram functions as a binding contract, implementing not less and most importantly NOT MORE logic than is described (within a certain boundary that needs to be well defined)
- lots of iPad apps for notetaking in which AI autocompletes your drawings and inserts things without your knowledge: this might seem more productive but is the opposite of what we want - we consciously want a gap between idea and AI. blind productivity is not progress. the disconnect between paper and ai is a feature, not a flaw

potential caveats:
- the fae problem: malicious AI could find gaps in the contract and introduce harm

potential criticism:
- "not efficient enough" nothing ever is
- layer between human and ai, or implementation detail and AI: thats a good thing imo. whats the point of unlimited progress if we lose control of its direction? progress is not the purpose. what we progress towards is, and we must remain in control of that
- 
